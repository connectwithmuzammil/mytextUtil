{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","to","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","border","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","Alert","height","alert","role","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9e8a9f15.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" to=\"/about\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n                   \r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = ()=>{ \r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        \r\n        setText(event.target.value) \r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        document.getSelection().removeAllRanges();\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState(''); \r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\"> \r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\" style={{backgroundColor: props.mode==='dark'?'#042743':'white', color: props.mode==='dark'?'white':'#042743', border:'2px solid black'}}></textarea>\r\n            </div> \r\n            <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\r\n            <button disabled={text.length===0} className=\"btn btn-danger mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div> \r\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something above to preview\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    \r\n    return (\r\n        <div style={{height:'50px'}}>\r\n      {  props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{props.alert.type}</strong>: {props.alert.msg} \r\n        </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert;","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport Navbar from './Components/Navbar';\r\nimport TextForm from './Components/TextForm';\r\n// import About from './Components/About';\r\nimport Alert from './Components/Alert';\r\n// import {\r\n//   BrowserRouter as Router,\r\n//   Switch,\r\n//   Route,\r\n//   Link\r\n// } from \"react-router-dom\";\r\n\r\n \r\nfunction App() {\r\n  const [mode, setMode] = useState('light'); \r\n  const [alert, setAlert] = useState(null);\r\n\r\n  const showAlert = (message, type)=>{\r\n      setAlert({\r\n        msg: message,\r\n        type: type\r\n      })\r\n      setTimeout(() => {\r\n          setAlert(null);\r\n      }, 1500);\r\n  }\r\n\r\n  const toggleMode = ()=>{\r\n    if(mode === 'light'){\r\n      setMode('dark');\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Dark mode has been enabled\", \"success\");\r\n      document.title = 'mytextUtils - Dark Mode';\r\n     \r\n    }\r\n    else{\r\n      setMode('light');\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Light mode has been enabled\", \"success\");\r\n      document.title = 'mytextUtils - Light Mode';\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n   \r\n    <Navbar title=\"mytextUtils\" mode={mode} toggleMode={toggleMode} />\r\n    <Alert alert={alert}/>\r\n    <div className=\"container my-3\">\r\n        {/* <About/> */}\r\n        <TextForm showAlert={showAlert} heading=\"Try mytextUtils - word counter, character counter, remove extra spaces\" mode={mode}/>\r\n    </div>\r\n    \r\n    </> \r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}